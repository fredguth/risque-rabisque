temp.txt

didInsertElement() {
    ...

    let background = new Image();
    // background.src = "https://mags.clubeami.com.br/357/files/assets/common/page-html5-substrates/page0003.jpg";
    // background.onload = () => {
    //   canvas.width = background.width;
    //   canvas.height = background.height;
    //   ctx.drawImage(background, 0,0);
    // }


// / references:
    // http://perfectionkills.com/exploring-canvas-drawing-techniques/
    // http://www.tricedesigns.com/2012/01/04/sketching-with-html5-canvas-and-brush-images/
    //
    // simple line:
    // ctx.lineTo(cmd.payload.x, cmd.payload.y);
    // ctx.stroke();
    //
    // brush:
    // let halfBrushW = brush.width/2;
    // let halfBrushH = brush.height/2;
    // let distance = parseInt(distanceBetween2Points(position, cmd.payload));
    // let angle = angleBetween2Points(position, cmd.payload);
    // let x, y, z:number = -1;
    // for (z=0; (z<=distance||z==0); z++) {
    //   x = position.x + (Math.sin(angle) * z) - halfBrushW;
    //   y = position.y + (Math.cos(angle) * z) - halfBrushH;
    //   ctx.drawImage(brush, x, y);
    // }
    //
    // qudratic curve:

    // let distance = parseInt(distanceBetween2Points(p1, p2));
    // let angle = angleBetween2Points(p1, p2);
    // let midPoint = {
    //   x: p1.x + (Math.sin(angle) * distance),
    //   y: p1.y + (Math.cos(angle) * distance)
    // };
    //
    // ctx.moveTo(points[0].x, points[0].y);
    // let midPoint;
    // let i;

    // for (i=1; i < points.length - 2; i++) {
    //   if (points[i+1]) {
    //     midPoint = {
    //     x: (points[i].x + points[i+1].x) / 2,
    //     y: (points[i].y + points[i+1].y) / 2,
    //   }
    //   ctx.quadraticCurveTo(points[i].x, points[i].y, midPoint.x, midPoint.y);
    //   }
    // }
    // points[i+1] && ctx.quadraticCurveTo(points[i].x, points[i].y, points[i+1].x, points[i+1].y);
    // ctx.stroke();
    // return ctx;



    //
    //    let p1 = points[0];
    // let p2 = points[1];
    // let p3 = points[2];
    // ctx.moveTo(p1.x, p1.y);

    // for (let i = 1, len = points.length; i < len; i++) {
    //   // // we pick the point between pi+1 & pi+2 as the
    //   // // end point and p1 as our control point
    //   // let midPoint = {
    //   //   x: p1.x + (p2.x - p1.x) / 2,
    //   //   y: p1.y + (p2.y - p1.y) / 2
    //   // };

    //   p3 && ctx.quadraticCurveTo(p2.x, p2.y, p3.x, p3.y);
    //   p1 = points[i];
    //   p2 = points[i+1];
    //   p3 = points[i+2];

    // }

    // p2 && ctx.quadraticCurveTo(p1.x, p1.y, p2.x, p2.y);
    // ctx.stroke();
    // return ctx;

    //
    //



     update(state, cmd) {
    let newState:PadState = state;
    let { ctx, position, brush, linePoints, undoCtx } = state;

    ctx.moveTo(position.x, position.y);
    newState = {
      ...newState,
      ctx
    }

    switch (cmd.type) {
      case 'mousedown': {

        undoCtx = ctx;

        //ctx.beginPath();
        newState = {
         ...newState,
         ctx,
         brushOn: true,
         position:cmd.payload,
         linePoints: [cmd.payload],
         undoCtx
        }

        break;
      }
      case 'mouseup': {
        undoCtx = ctx;
        newState = {
         ...newState,
         brushOn: false,
         position:cmd.payload,
         undoCtx
        }
        break;
      }
      case 'mousemove': {

        if (state.brushOn ) {

          linePoints.push(cmd.payload);

          newState = {
            ...newState,
            ctx: this.drawBezierCurve(undoCtx, linePoints)
          }

        }
        break
      }
    }
    //return newState;
    this.state = newState;
  }

  drawBezierCurve( ctx, points ) {
    // console.log(`normal: ${JSON.stringify(points)}`);
    // var p0, p1, p2, p3, p4, p5;
    // p0 = p1 = {
    //   x:0,
    //   y:0
    // };
    // // p1 = {
    // //   x:0,
    // //   y:0
    // // };
    // p1.x =11;
    // p2.x = 20;
    // p3.x = 31;
    // p4.x = 40;
    // p5.x = 51;
    //let arr = [p0, p1];
    //console.log(`input: ${JSON.stringify(arr)}`);
    //points = this.spaced(arr, 10);
    // console.log(`spaced: ${JSON.stringify(this.spaced(points, 10))}`);
    // https://gielberkers.com/drawing-a-smooth-bezier-line-through-several-points/
    ctx.beginPath();
    ctx.moveTo(points[0].x, points[0].y);
    for (let i=0; i < points.length; i++) {
      let p0,p1,p2;
      p0 = points[i];
      p1 = points[i+1];
      p2 = points[i+2];
      if (p2) {
        let [anchor0, anchor1] = this.getAnchors([p0,p1,p2]);
        //ctx.fillRect(p0.x, p0.y, 3, 3);
        ctx.bezierCurveTo(anchor0.x, anchor0.y, anchor1.x, anchor1.y, p1.x, p1.y);
        //ctx.moveTo(p0.x, p0.y);
        //ctx.lineTo(p1.x, p1.y);
      }
    }
    ctx.stroke();
    return ctx;

  }

  spaced(input, space) {
    let points = input;
    //[] -> []
    if (points.length <1 ) {
      return [];

    }

    let p0 = points.shift();

    // [p0] -> [p0]
    if (points.length < 1) {

      points.unshift(p0);
      return points;
    }

    let p1 = points.shift();
    // [p0, p1...]
    if (distanceBetween2Points(p0, p1) > space) {

      points.unshift(p1)
    }
    points = this.spaced(points, space);

    points.unshift(p0);
    return points;
  }

  getAnchors([p0, p1, p2]) {
    //get the vector from p0 to p2

    let deltax = (p2.x-p0.x);
    let deltay = (p2.y-p0.y);
    let distance = Math.sqrt(Math.pow(deltax, 2) + Math.pow(deltay,2));
    let vector = {
      x: deltax/distance,
      y: deltay/distance
    }

    let normal1 = {
      x: -vector.y,
      y: vector.x
    }
    let normal2 = {
      x: vector.y,
      y: -vector.x
    }

    let angle1 = Math.atan2(normal1.y, normal1.x) + Math.PI/2;
    let angle2 = Math.atan2(normal2.y, normal2.x) + Math.PI/2;

    let anchor1 = {
      x: p1.x + Math.cos(angle1) * (distance/2),
      y: p1.y + Math.sin(angle1) * (distance/2)
    }
    let anchor2 = {
      x: p1.x + Math.cos(angle2) * (distance/2),
      y: p1.y + Math.sin(angle2) * (distance/2)
    }
    return [anchor1, anchor2];
  }


}



